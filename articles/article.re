= レビューアーとレビューイーのための本

技術書や技術ブログの「レビュー」の仕方
傷つかない、傷つけない、自分が書いた「技術文書」への指摘を上手に受け止める方法

== レビュアーの場合

これはGitHubでsuggested changeを使うと、「こんなふうに直して」が具体的に伝えられて、双方楽だよねーみたいな話を書きたい。あと指摘に対して色々理由を付けて「直したくない！」って言いたくなるときの自分の心の動きとか。
https://github.blog/changelog/2020-02-26-multi-line-code-suggestions-beta/

https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/incorporating-feedback-in-your-pull-request

> You can now suggest a specific change to multiple lines of code when reviewing a pull request.
え、うっそ、まじか！複数行へのコメントはできても、複数行へのsuggestionは書けなくてめんどいなって思ってたのに、できるようになってる！！！！

== 理由と代案を提示しよう

== 直してほしい度合いを3段階で伝えよう

nitpicking, nice-to-have, MUST FIX

== 初稿に対する敬意を持とう

傷つけて溜飲を下げたいのか、よりよい文章にできるだけ早く辿り着きたいのか、目的をはっきりさせよう

== 直接手を入れさせてもらった方がいいケースもある

教育が目的か、よりよい文章に早く辿り着きたいのか

レビューでどう修正して欲しいかとその理由を伝えて、レビューイー自身で直してもらって、成果物をレビュアーが期待する基準まで持って行くのってとても大変で、自分で直していいならその方が圧倒的に楽で時間もかからない。

== レビューイーの場合

=== 完成度を高める前に見てもらおう

1度のずれは、書き始めてすぐならすぐ軌道修正できるけど、100m進んだ後だと修正に時間がかかる。

=== 実際の見た目でレビューしてもらおう

mdをそのまま見てもらうんじゃなくて、デプロイした結果の見た目で見てもらおう。

=== 直すか直さないか迷ったら直す

「ここ直した方がいいんじゃない？」って言われたり思ったりしたときに、色々理由を付けて直さない方向に持っていきたくなる気持ちが一瞬湧き上がるけど、それは押し込めて素直に直した方がいいぞ（意訳）っていうのを読んで「絵もライティングもおんなじだな」って思った。

note版 突然画力が伸びだした時、僕が発見した事｜安倍吉俊｜note
https://note.com/abfly/n/n04a315114fcd

=== 指摘を受け入れるか否かの判断は自分にある

レビューを取り込むか否かのオーナーシップは初稿を書いた人にある。
レビューはあくまでレビュー、その指摘に納得がいけば取り込むし、納得がいかなければ取り込まない。
意見の摺り合わせで落とし所が見つかれば良いけど、そうでなければ自分の責任で取り込む取り込まないを決めよう。

=== 無限に直していつまでも出せないよりは、出して後から直そう

ねこはかわいい。







A is B
